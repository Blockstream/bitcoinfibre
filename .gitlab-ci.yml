variables:
  UBUNTU_BUILDER: $DOCKER_REGISTRY/satellite/bitcoinsatellite/ubuntu-builder:$CI_COMMIT_SHA
  FEDORA_BUILDER: $DOCKER_REGISTRY/satellite/bitcoinsatellite/fedora-builder:$CI_COMMIT_SHA
  CENTOS_BUILDER: $DOCKER_REGISTRY/satellite/bitcoinsatellite/centos-builder:$CI_COMMIT_SHA
  I686_BUILDER: $DOCKER_REGISTRY/satellite/bitcoinsatellite/i686-builder:$CI_COMMIT_SHA
  ARM_BUILDER: $DOCKER_REGISTRY/satellite/bitcoinsatellite/arm-builder:$CI_COMMIT_SHA

builders:
  image: docker
  stage: .pre
  tags:
    - k8s-docker
  services:
    - docker:19-dind
  before_script:
    - echo "$CI_BUILD_TOKEN" | docker login -u gitlab-ci-token --password-stdin $DOCKER_REGISTRY
  parallel:
    matrix:
      - BUILDER: ["ubuntu-builder", "fedora-builder", "centos-builder", "i686-builder", "arm-builder"]
  variables:
    IMAGE: $DOCKER_REGISTRY/satellite/bitcoinsatellite/$BUILDER
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://localhost:2375
    DOCKER_TLS_CERTDIR: ""
  timeout: 2h
  script:
    - docker pull $IMAGE:$CI_COMMIT_REF_SLUG || docker pull $IMAGE:latest || true
    - >
      docker build
      -f docker/$BUILDER.docker
      --cache-from $IMAGE:$CI_COMMIT_REF_SLUG
      --cache-from $IMAGE:latest
      --build-arg BUILDKIT_INLINE_CACHE=1
      -t $IMAGE:$CI_COMMIT_SHA
      -t $IMAGE:$CI_COMMIT_REF_SLUG
      -t $IMAGE:latest
      .
    - docker push $IMAGE:$CI_COMMIT_SHA
    - docker push $IMAGE:$CI_COMMIT_REF_SLUG
    - if [ $CI_COMMIT_BRANCH == "master" ]; then docker push $IMAGE:latest; fi

.build:
  stage: build
  tags:
    - k8s
  variables:
    CCACHE_DIR: $CI_PROJECT_DIR/.ccache/
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - $CCACHE_DIR
  before_script:
    - mkdir -p $CCACHE_DIR

.build:x86:gcc:
  extends: .build
  script:
    - ./autogen.sh
    - mkdir build && cd build
    - if [ -z "$CI_COMMIT_TAG" ]; then export CONFIG_FLAGS="--disable-wallet --with-gui=no"; fi
    - ../configure $CONFIG_FLAGS
    - make -j$(nproc)
    - make check

build:x86:ubuntu:
  extends: .build:x86:gcc
  image: $UBUNTU_BUILDER

build:x86:fedora:
  extends: .build:x86:gcc
  image: $FEDORA_BUILDER

build:x86:centos:
  extends: .build:x86:gcc
  image: $CENTOS_BUILDER

build:x86:clang:
  extends: .build
  image: $UBUNTU_BUILDER
  script:
    - ./autogen.sh
    - mkdir build && cd build
    - CC=clang CXX=clang++ ../configure --disable-wallet --with-gui=no
    - make -j$(nproc)
    - make check

.build:cross:
  extends: .build
  image: $ARM_BUILDER
  script:
    - ./autogen.sh
    - mkdir build && cd build
    - if [ -z "$CI_COMMIT_TAG" ]; then export CONFIG_FLAGS="--disable-wallet --with-gui=no"; fi
    - ../configure --prefix=/src/depends/$HOST --enable-glibc-back-compat --enable-reduce-exports $CONFIG_FLAGS
    - make -j$(nproc)
  artifacts:
    paths:
      - build/src/test/test_bitcoin
    expire_in: 10 minutes

build:aarch64:
  extends: .build:cross
  variables:
    HOST: "aarch64-linux-gnu"

build:armhf:
  extends: .build:cross
  variables:
    HOST: "arm-linux-gnueabihf"

build:i686:
  extends: .build:cross
  image: $I686_BUILDER
  variables:
    HOST: "i686-pc-linux-gnu"

# Run cross-build tests on the deb-packer runner, which has qemu-user support.
.test:cross:
  image: $ARM_BUILDER
  stage: test
  tags:
    - k8s

test:aarch64:
  extends: .test:cross
  needs:
    - build:aarch64
  script:
    - qemu-aarch64 -L /usr/aarch64-linux-gnu build/src/test/test_bitcoin

test:armhf:
  extends: .test:cross
  needs:
    - build:armhf
  script:
    - qemu-arm -L /usr/arm-linux-gnueabihf build/src/test/test_bitcoin

test:i686:
  extends: .test:cross
  image: $I686_BUILDER
  needs:
    - build:i686
  script:
    - build/src/test/test_bitcoin

deb-packages:
  stage: test
  tags:
    - deb-packer
  only:
    - tags
  dependencies: []
  timeout: 12h
  script:
    - blocksat-build -p bitcoin-satellite --pbuilder --aptly --aptly-test -o build/ $CI_COMMIT_TAG
  artifacts:
    paths:
      - build/

rpm-packages:
  stage: test
  tags:
    - rpm-packer
  only:
    - tags
  dependencies: []
  timeout: 12h
  script:
    - sed -i "/\"epel-7-x86_64\",/d" /src/satellite-pkg/config/build_info.json
    - blocksat-build -p bitcoin-satellite --mock $CI_COMMIT_TAG

.pkg-upload:
  stage: deploy
  dependencies: []
  when: manual
  only:
    variables:
      - $CI_COMMIT_TAG =~ /^v(\d+\.)(\d+\.)(\d+)-satellite(\d+\.)(\d+\.)(\d+)$/

aptly:
  extends: .pkg-upload
  tags:
    - deb-packer
  dependencies:
    - deb-packages
  script:
    - /src/satellite-pkg/tools/pbuilder.py upload build/

launchpad:
  extends: .pkg-upload
  tags:
    - deb-packer
  script:
    - blocksat-build -p bitcoin-satellite --upload $CI_COMMIT_TAG

copr:
  extends: .pkg-upload
  tags:
    - rpm-packer
  script:
    - sed -i "/\"epel-7-x86_64\",/d" /src/satellite-pkg/config/build_info.json
    - blocksat-build -p bitcoin-satellite --upload $CI_COMMIT_TAG
